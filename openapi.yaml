openapi: "3.1.0"
info:
  title: Adfire API
  version: "0.1"
  description: >
    A collection of APIs and schema definitions shared between Adfire backend and frontend.

servers:
  - url: /v0
    description: Base path independent of service hostname

tags:
  - name: accounts
    description: Everything about accounts.
  - name: transactions
    description: Everything about transactions.

components:
  parameters:
    SessionToken:
      name: authjs.session-token
      description: Session token created by authjs
      in: cookie
      schema:
        type: string
        format: uuid
      required: true
    Id:
      description: Entity identifier.
      name: id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
    Order:
      description: Order to sort entities by date.
      name: order
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
      required: false
    Limit:
      description: Maximum number of items returned. If not provided, will attempt to return all available items.
      name: limit
      in: query
      schema:
        type: number
      required: false
  schemas:
    Name:
      description: A textual representation of this entity.
      type: string
      minLength: 1
      maxLength: 256
    Id:
      description: A globally unique identifier for this entity.
      type: string
      format: uuid
    InternalAccountType:
      description: Account types that the user owns.
      type: string
      enum:
        - asset
        - liability
    ExternalAccountType:
      description: Account types that the user does not own.
      type: string
      enum:
        - income
        - expense
    DebitAccountType:
      description: Account types with a normal debit balance.
      type: string
      enum:
        - asset
        - expense
    CreditAccountType:
      description: Account types with a normal credit balance.
      type: string
      enum:
        - liability
        - income
    AccountType:
      description: |
        Account type choices. Each type of account changes balance based on the following context:
        * `asset` (+) debit; (-) credit
        * `liability` (+) credit; (-) debit
        * `income` (+) credit; (-) debit
        * `expense` (+) debit; (-) credit
        
        In addition, internal accounts, e.g. `asset` and `liability`, contribute to the equity of
        the user portfolio following this equation: `E = A - L`, where `E` is portfolio equity/balance,
        `A` is total balance of asset accounts, and `L` is total balance of liability accounts. The opposite,
        external accounts, e.g. `income` and `expense` do not contribute to portfolio equity.
      type: string
      enum:
        - asset
        - liability
        - income
        - expense
    AccountInput:
      description: A simplified representation of an account before creation.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        type:
          $ref: '#/components/schemas/AccountType'
        domain:
          description: The institutional domain name associated with this account.
          type: string
      required:
        - name
        - type
    Account:
      description: An entity that acts upon a collection of transactions.
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/Name'
        type:
          $ref: '#/components/schemas/AccountType'
        domain:
          description: The institutional domain name associated with this account.
          type:
            - string
            - 'null'
      required:
        - id
        - name
        - type
        - domain
    TransactionType:
      description: Transaction type choices.
      type: string
      enum:
        - income
        - expense
        - transfer
    TransactionInput:
      description: A simplified representation of a transaction before creation.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        type:
          $ref: '#/components/schemas/TransactionType'
        entries:
          description: >
            All input entries must have unique accounts. The sum of all debits must equal the sum of
            all credits.
          type: array
          items:
            $ref: '#/components/schemas/EntryInput'
      required:
        - name
        - type
        - entries
    TransactionSide:
      description: A detail of one side of a transaction.
      type: object
      properties:
        accounts:
          description: List of accounts on this side.
          type: array
          items:
            $ref: '#/components/schemas/Account'
        equity:
          description: The net equity due to the balance changes of accounts in this side.
          type: number
      required:
        - accounts
        - equity
    Transaction:
      description: An event involving an exchange of monetary values between accounts.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/Name'
        type:
          $ref: '#/components/schemas/TransactionType'
        date:
          description: The earliest date of all entries in this transaction.
          type: string
          format: date
        equity:
          description: The net equity of all the balance changes of the accounts involved.
          type: number
        value:
          description: The total value transacted
          type: number
          minimum: 0
          exclusiveMinimum: true
        from:
          $ref: '#/components/schemas/TransactionSide'
        to:
          $ref: '#/components/schemas/TransactionSide'
      required:
        - id
        - name
        - type
        - date
        - equity
        - from
        - to
    EntryType:
      description: Entry type depending on the sign amount due on the account and the account type.
      type: string
      enum:
        - credit
        - debit
    EntryInput:
      description: A simplified representation of an entry before creation.
      type: object
      properties:
        date:
          description: The date this entry took place.
          type: string
          format: date
        amount:
          description: The amount this entry contributes to the account balance.
          type: number
        accountId:
          $ref: '#/components/schemas/Id'
      required:
        - date
        - amount
        - accountId
    Entry:
      description: A component of a transaction that records a balance change to an account at a specific date.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        date:
          description: The date this entry took place.
          type: string
          format: date
        amount:
          description: The amount this entry contributes to the account balance.
          type: number
        account:
          $ref: '#/components/schemas/Account'
      required:
        - id
        - date
        - amount
        - account
  examples:
    accountInputAsset:
      value: &ex_account_input_asset
        name: Chase Total Checking
        type: asset
        domain: chase.com
    accountChecking:
      value: &ex_account_checking
        id: chase-total-checking
        name: Chase Total Checking
        type: asset
        domain: chase.com
        balance: 100
    accountCreditCard:
      value: &ex_account_credit_card
        id: amex-gold
        name: Amex Gold
        type: liability
        domain: americanexpress.com
        balance: 1100
    accountGroceryStore:
      value: &ex_account_grocery_store
        id: heb
        name: HEB
        type: expense
        domain: heb.com
        balance: 1100
    accountRestaurant:
      value: &ex_account_restaurant
        id: olive-garden
        name: Olive Garden
        type: expense
        domain: olivegarden.com
        balance: 50
    accountSalary:
      value: &ex_account_salary
        id: amazon-salary
        name: Amazon Salary
        type: income
        domain: amazon.com
        balance: 8000
    accountsList:
      value: &ex_accounts_list
        - *ex_account_checking
        - *ex_account_credit_card
        - *ex_account_grocery_store
        - *ex_account_restaurant
        - *ex_account_salary
    transactionInputExpense:
      value:
        name: Groceries
        type: expense
        entries:
          - date: '2025-03-01'
            balance: 100
            accountId: 'amex-gold'
          - date: '2025-03-02'
            balance: 100
            accountId: 'heb'
    transactionGroceries:
      value: &ex_transaction_groceries
        id: RyezBGqA
        name: Groceries
        type: expense
        date: "2025-03-01"
        counterparties:
          - id: heb
            name: HEB
            type: expense
            domain: heb.com
            balance: 1100
        cisparties:
          - id: amex-gold
            name: Amex Gold
            type: liability
            domain: americanexpress.com
            balance: 1100
        credit: 100
        debit: 0
    transactionEatingOut:
      value: &ex_transaction_eating_out
        id: Uy8DM4Xs
        name: Eating out
        type: expense
        date: "2025-03-02"
        counterparties:
          - id: olive-garden
            name: Olive Garden
            type: expense
            domain: olivegarden.com
            balance: 50
        cisparties:
          - id: amex-gold
            name: Amex Gold
            type: liability
            domain: americanexpress.com
            balance: 1100
        amount: 50
        isCredit: true
        value: 50
    transactionSalary:
      value: &ex_transaction_salary
        id: y-ZoDsA6
        name: Salary
        type: income
        date: "2025-03-15"
        counterparties:
          - id: amazon-salary
            name: Amazon Salary
            type: income
            domain: amazon.com
            balance: 8000
        cisparties:
          - id: chase-total-checking
            name: Chase Total Checking
            type: asset
            domain: chase.com
            balance: 8000
        amount: 8000
        isCredit: false
        value: 8000
    transactionCreditCardPayment:
      value: &ex_transaction_credit_card_payment
        id: y-ZoDsA6
        name: Credit Card Statement Payment
        type: transfer
        date: "2025-03-17"
        counterparties:
          - id: amex-gold
            name: Amex Gold
            type: liability
            domain: americanexpress.com
            balance: 1100
        cisparties:
          - id: chase-total-checking
            name: Chase Total Checking
            type: asset
            domain: chase.com
            balance: 8000
        amount: 1000
        isCredit: true
        value: 1000
    transactionsList:
      value: &ex_transactions_list
        - *ex_transaction_groceries
        - *ex_transaction_eating_out
        - *ex_transaction_salary
        - *ex_transaction_credit_card_payment
    accountTransactionsList:
      value: &ex_account_transactions_list
        - *ex_transaction_groceries
        - *ex_transaction_eating_out
    entriesList:
      value: &ex_entries_list
        - id: BNR9eUIF
          date: "2025-03-01"
          amount: 100
          isCredit: true
          account: *ex_account_grocery_store
        - id: c_t3RwnQ
          date: "2025-03-02"
          amount: 100
          isCredit: false
          account: *ex_account_restaurant

paths:
  /accounts:
    get:
      tags:
        - accounts
      summary: Returns all accounts.
      description: >
        Returns all accounts belonging to the session user sorted by name in ascending order. The balance
        in each account item is the current balance of the respective account.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
    #              example:
    #                *ex_accounts_list
    post:
      tags:
        - accounts
      summary: Creates a new account.
      description: >
        Creates a new account belonging to the session user. The ID of the account is generated by converting
        the given name to kebab case. Account names must be unique.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInput'
      #            examples:
      #              asset:
      #                $ref: '#/components/examples/accountInputAsset'
      responses:
        201:
          description: Created
          headers:
            Location:
              description: The URL of the newly created account.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        #              examples:
        #                asset:
        #                  $ref: '#/components/examples/accountChecking'
        422:
          description: Unprocessable Content
  /accounts/{id}:
    get:
      tags:
        - accounts
      summary: Returns an account with the given ID.
      description: >
        Returns an account with the given ID belonging to the session user. The balance in the response
        is the current balance of the account.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        #              examples:
        #                checking:
        #                  $ref: '#/components/examples/accountChecking'
        #                credit card:
        #                  $ref: '#/components/examples/accountCreditCard'
        #                grocery store:
        #                  $ref: '#/components/examples/accountGroceryStore'
        #                restaurant:
        #                  $ref: '#/components/examples/accountRestaurant'
        #                salary:
        #                  $ref: '#/components/examples/accountSalary'
        404:
          description: Not found
    put:
      tags:
        - accounts
      summary: Replaces the account with the given ID
      description: >
        Replaces the account with the given ID belonging to the session user with a new content, or creates a new one if
        an account with the given ID does not exist. If the name of the account changes, the ID of the account is also
        updated to reflect the kebab case of the new name.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInput'
      #            examples:
      #              asset:
      #                $ref: '#/components/examples/accountInputAsset'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        #              examples:
        #                asset:
        #                  $ref: '#/components/examples/accountChecking'
        201:
          description: Created
          headers:
            Location:
              description: The URL of the newly created account.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        #              examples:
        #                asset:
        #                  $ref: '#/components/examples/accountChecking'
        404:
          description: Not found
        422:
          description: Unprocessable content
    delete:
      tags:
        - accounts
      summary: Deletes an account with the given ID.
      description: Deletes an account with the given ID belonging to the session user.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Id'
      responses:
        204:
          description: No content
        404:
          description: Not found
  /accounts/{id}/transactions:
    get:
      tags:
        - accounts
      summary: Returns all transactions of an account.
      description: Returns a sorted series of all transactions of an account with the given ID belonging to the session user.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        #              example:
        #                *ex_account_transactions_list
        404:
          description: Not found
  /transactions:
    get:
      tags:
        - transactions
      summary: Returns all transactions.
      description: Returns a sorted series of all transactions of the session user.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    #              example:
    #                *ex_transactions_list
    post:
      tags:
        - transactions
      summary: Creates a new transaction.
      description: Creates a new transaction belonging to the session user.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInput'
      #            examples:
      #              expense:
      #                $ref: '#/components/examples/transactionInputExpense'
      responses:
        201:
          description: Created
          headers:
            Location:
              description: The URL of the newly created transaction.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  #              examples:
  #                expense:
  #                  $ref: '#/components/examples/transactionGroceries'
  /transactions/{id}:
    get:
      tags:
        - transactions
      summary: Returns a transaction with the given ID.
      description: Returns a transaction with the given ID belonging to the user.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    #              examples:
    #                groceries:
    #                  $ref: '#/components/examples/transactionGroceries'
    #                eating out:
    #                  $ref: '#/components/examples/transactionEatingOut'
    #                salary:
    #                  $ref: '#/components/examples/transactionSalary'
    #                credit card payment:
    #                  $ref: '#/components/examples/transactionCreditCardPayment'
    put:
      tags:
        - transactions
      summary: Replaces the transaction with the given ID.
      description: >
        Replaces the transaction with the given ID belonging to the user, or creates a new one if the transaction with
        the given ID does not exist.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInput'
      #            examples:
      #              expense:
      #                $ref: '#/components/examples/transactionInputExpense'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        #              examples:
        #                expense:
        #                  $ref: '#/components/examples/transactionGroceries'
        201:
          description: Created
          headers:
            Location:
              description: The URL of the newly created transaction.
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    #              examples:
    #                expense:
    #                  $ref: '#/components/examples/transactionGroceries'
    delete:
      tags:
        - transactions
      summary: Deletes the transaction with the given ID.
      description: Deletes the transaction with the given ID belonging to the user.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Id'
      responses:
        204:
          description: No Content
  /transactions/{id}/entries:
    get:
      tags:
      - transactions
      summary: Returns all entries of a transaction
      description: Returns a sorted series of all entries of a transaction with the given ID belonging to the session user.
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Order'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'